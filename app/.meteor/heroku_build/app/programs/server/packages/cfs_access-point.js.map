{"version":3,"sources":["meteor://ðŸ’»app/packages/cfs_access-point/packages/cfs_access-point.js"],"names":[],"mappingsfile":"/packages/cfs_access-point.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/cfs:access-point/access-point-common.js                                                                  //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nbaseUrl = '/cfs';                                                                                                    // 1\nFS.HTTP = FS.HTTP || {};                                                                                             // 2\n                                                                                                                     // 3\n// Note the upload URL so that client uploader packages know what it is                                              // 4\nFS.HTTP.uploadUrl = baseUrl + '/files';                                                                              // 5\n                                                                                                                     // 6\n/**                                                                                                                  // 7\n * @method FS.HTTP.setBaseUrl                                                                                        // 8\n * @public                                                                                                           // 9\n * @param {String} newBaseUrl - Change the base URL for the HTTP GET and DELETE endpoints.                           // 10\n * @returns {undefined}                                                                                              // 11\n */                                                                                                                  // 12\nFS.HTTP.setBaseUrl = function setBaseUrl(newBaseUrl) {                                                               // 13\n                                                                                                                     // 14\n  // Adjust the baseUrl if necessary                                                                                 // 15\n  if (newBaseUrl.slice(0, 1) !== '/') {                                                                              // 16\n    newBaseUrl = '/' + newBaseUrl;                                                                                   // 17\n  }                                                                                                                  // 18\n  if (newBaseUrl.slice(-1) === '/') {                                                                                // 19\n    newBaseUrl = newBaseUrl.slice(0, -1);                                                                            // 20\n  }                                                                                                                  // 21\n                                                                                                                     // 22\n  // Update the base URL                                                                                             // 23\n  baseUrl = newBaseUrl;                                                                                              // 24\n                                                                                                                     // 25\n  // Change the upload URL so that client uploader packages know what it is                                          // 26\n  FS.HTTP.uploadUrl = baseUrl + '/files';                                                                            // 27\n                                                                                                                     // 28\n  // Remount URLs with the new baseUrl, unmounting the old, on the server only.                                      // 29\n  // If existingMountPoints is empty, then we haven't run the server startup                                         // 30\n  // code yet, so this new URL will be used at that point for the initial mount.                                     // 31\n  if (Meteor.isServer && !FS.Utility.isEmpty(_existingMountPoints)) {                                                // 32\n    mountUrls();                                                                                                     // 33\n  }                                                                                                                  // 34\n};                                                                                                                   // 35\n                                                                                                                     // 36\n/*                                                                                                                   // 37\n * FS.File extensions                                                                                                // 38\n */                                                                                                                  // 39\n                                                                                                                     // 40\n/**                                                                                                                  // 41\n * @method FS.File.prototype.url Construct the file url                                                              // 42\n * @public                                                                                                           // 43\n * @param {Object} [options]                                                                                         // 44\n * @param {String} [options.store] Name of the store to get from. If not defined, the first store defined in `options.stores` for the collection on the client is used.\n * @param {Boolean} [options.auth=null] Add authentication token to the URL query string? By default, a token for the current logged in user is added on the client. Set this to `false` to omit the token. Set this to a string to provide your own token. Set this to a number to specify an expiration time for the token in seconds.\n * @param {Boolean} [options.download=false] Should headers be set to force a download? Typically this means that clicking the link with this URL will download the file to the user's Downloads folder instead of displaying the file in the browser.\n * @param {Boolean} [options.brokenIsFine=false] Return the URL even if we know it's currently a broken link because the file hasn't been saved in the requested store yet.\n * @param {Boolean} [options.metadata=false] Return the URL for the file metadata access point rather than the file itself.\n * @param {String} [options.uploading=null] A URL to return while the file is being uploaded.                        // 50\n * @param {String} [options.storing=null] A URL to return while the file is being stored.                            // 51\n * @param {String} [options.filename=null] Override the filename that should appear at the end of the URL. By default it is the name of the file in the requested store.\n *                                                                                                                   // 53\n * Returns the HTTP URL for getting the file or its metadata.                                                        // 54\n */                                                                                                                  // 55\nFS.File.prototype.url = function(options) {                                                                          // 56\n  var self = this;                                                                                                   // 57\n  options = options || {};                                                                                           // 58\n  options = FS.Utility.extend({                                                                                      // 59\n    store: null,                                                                                                     // 60\n    auth: null,                                                                                                      // 61\n    download: false,                                                                                                 // 62\n    metadata: false,                                                                                                 // 63\n    brokenIsFine: false,                                                                                             // 64\n    uploading: null, // return this URL while uploading                                                              // 65\n    storing: null, // return this URL while storing                                                                  // 66\n    filename: null // override the filename that is shown to the user                                                // 67\n  }, options.hash || options); // check for \"hash\" prop if called as helper                                          // 68\n                                                                                                                     // 69\n  // Primarily useful for displaying a temporary image while uploading an image                                      // 70\n  if (options.uploading && !self.isUploaded()) {                                                                     // 71\n    return options.uploading;                                                                                        // 72\n  }                                                                                                                  // 73\n                                                                                                                     // 74\n  if (self.isMounted()) {                                                                                            // 75\n    // See if we've stored in the requested store yet                                                                // 76\n    var storeName = options.store || self.collection.primaryStore.name;                                              // 77\n    if (!self.hasStored(storeName)) {                                                                                // 78\n      if (options.storing) {                                                                                         // 79\n        return options.storing;                                                                                      // 80\n      } else if (!options.brokenIsFine) {                                                                            // 81\n        // We want to return null if we know the URL will be a broken                                                // 82\n        // link because then we can avoid rendering broken links, broken                                             // 83\n        // images, etc.                                                                                              // 84\n        return null;                                                                                                 // 85\n      }                                                                                                              // 86\n    }                                                                                                                // 87\n                                                                                                                     // 88\n    // Add filename to end of URL if we can determine one                                                            // 89\n    var filename = options.filename || self.name({store: storeName});                                                // 90\n    if (typeof filename === \"string\" && filename.length) {                                                           // 91\n      filename = '/' + filename;                                                                                     // 92\n    } else {                                                                                                         // 93\n      filename = '';                                                                                                 // 94\n    }                                                                                                                // 95\n                                                                                                                     // 96\n    // TODO: Could we somehow figure out if the collection requires login?                                           // 97\n    var authToken = '';                                                                                              // 98\n    if (Meteor.isClient && typeof Accounts !== \"undefined\" && typeof Accounts._storedLoginToken === \"function\") {    // 99\n      if (options.auth !== false) {                                                                                  // 100\n        // Add reactive deps on the user                                                                             // 101\n        Meteor.userId();                                                                                             // 102\n                                                                                                                     // 103\n        var authObject = {                                                                                           // 104\n          authToken: Accounts._storedLoginToken() || ''                                                              // 105\n        };                                                                                                           // 106\n                                                                                                                     // 107\n        // If it's a number, we use that as the expiration time (in seconds)                                         // 108\n        if (options.auth === +options.auth) {                                                                        // 109\n          authObject.expiration = FS.HTTP.now() + options.auth * 1000;                                               // 110\n        }                                                                                                            // 111\n                                                                                                                     // 112\n        // Set the authToken                                                                                         // 113\n        var authString = JSON.stringify(authObject);                                                                 // 114\n        authToken = FS.Utility.btoa(authString);                                                                     // 115\n      }                                                                                                              // 116\n    } else if (typeof options.auth === \"string\") {                                                                   // 117\n      // If the user supplies auth token the user will be responsible for                                            // 118\n      // updating                                                                                                    // 119\n      authToken = options.auth;                                                                                      // 120\n    }                                                                                                                // 121\n                                                                                                                     // 122\n    // Construct query string                                                                                        // 123\n    var params = {};                                                                                                 // 124\n    if (authToken !== '') {                                                                                          // 125\n      params.token = authToken;                                                                                      // 126\n    }                                                                                                                // 127\n    if (options.download) {                                                                                          // 128\n      params.download = true;                                                                                        // 129\n    }                                                                                                                // 130\n    if (options.store) {                                                                                             // 131\n      // We use options.store here instead of storeName because we want to omit the queryString                      // 132\n      // whenever possible, allowing users to have \"clean\" URLs if they want. The server will                        // 133\n      // assume the first store defined on the server, which means that we are assuming that                         // 134\n      // the first on the client is also the first on the server. If that's not the case, the                        // 135\n      // store option should be supplied.                                                                            // 136\n      params.store = options.store;                                                                                  // 137\n    }                                                                                                                // 138\n    var queryString = FS.Utility.encodeParams(params);                                                               // 139\n    if (queryString.length) {                                                                                        // 140\n      queryString = '?' + queryString;                                                                               // 141\n    }                                                                                                                // 142\n                                                                                                                     // 143\n    // Determine which URL to use                                                                                    // 144\n    var area;                                                                                                        // 145\n    if (options.metadata) {                                                                                          // 146\n      area = '/record';                                                                                              // 147\n    } else {                                                                                                         // 148\n      area = '/files';                                                                                               // 149\n    }                                                                                                                // 150\n                                                                                                                     // 151\n    // Construct and return the http method url                                                                      // 152\n    return baseUrl + area + '/' + self.collection.name + '/' + self._id + filename + queryString;                    // 153\n  }                                                                                                                  // 154\n                                                                                                                     // 155\n};                                                                                                                   // 156\n                                                                                                                     // 157\n                                                                                                                     // 158\n                                                                                                                     // 159\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/cfs:access-point/access-point-handlers.js                                                                //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\ngetHeaders = [];                                                                                                     // 1\ngetHeadersByCollection = {};                                                                                         // 2\n                                                                                                                     // 3\n/**                                                                                                                  // 4\n * @method httpDelHandler                                                                                            // 5\n * @private                                                                                                          // 6\n * @returns {any} response                                                                                           // 7\n *                                                                                                                   // 8\n * HTTP DEL request handler                                                                                          // 9\n */                                                                                                                  // 10\nhttpDelHandler = function httpDelHandler(ref) {                                                                      // 11\n  var self = this;                                                                                                   // 12\n  var opts = FS.Utility.extend({}, self.query || {}, self.params || {});                                             // 13\n                                                                                                                     // 14\n  // If DELETE request, validate with 'remove' allow/deny, delete the file, and return                               // 15\n  FS.Utility.validateAction(ref.collection.files._validators['remove'], ref.file, self.userId);                      // 16\n                                                                                                                     // 17\n  /*                                                                                                                 // 18\n   * From the DELETE spec:                                                                                           // 19\n   * A successful response SHOULD be 200 (OK) if the response includes an                                            // 20\n   * entity describing the status, 202 (Accepted) if the action has not                                              // 21\n   * yet been enacted, or 204 (No Content) if the action has been enacted                                            // 22\n   * but the response does not include an entity.                                                                    // 23\n   */                                                                                                                // 24\n  self.setStatusCode(200);                                                                                           // 25\n                                                                                                                     // 26\n  return {                                                                                                           // 27\n    deleted: !!ref.file.remove()                                                                                     // 28\n  };                                                                                                                 // 29\n};                                                                                                                   // 30\n                                                                                                                     // 31\n/**                                                                                                                  // 32\n * @method httpGetHandler                                                                                            // 33\n * @private                                                                                                          // 34\n * @returns {any} response                                                                                           // 35\n *                                                                                                                   // 36\n * HTTP GET request handler                                                                                          // 37\n */                                                                                                                  // 38\nhttpGetHandler = function httpGetHandler(ref) {                                                                      // 39\n  var self = this;                                                                                                   // 40\n  // Once we have the file, we can test allow/deny validators                                                        // 41\n  // XXX: pass on the \"share\" query eg. ?share=342hkjh23ggj for shared url access?                                   // 42\n  FS.Utility.validateAction(ref.collection._validators['download'], ref.file, self.userId /*, self.query.shareId*/); // 43\n                                                                                                                     // 44\n  var storeName = ref.storeName;                                                                                     // 45\n                                                                                                                     // 46\n  // If no storeName was specified, use the first defined storeName                                                  // 47\n  if (typeof storeName !== \"string\") {                                                                               // 48\n    // No store handed, we default to primary store                                                                  // 49\n    storeName = ref.collection.primaryStore.name;                                                                    // 50\n  }                                                                                                                  // 51\n                                                                                                                     // 52\n  // Get the storage reference                                                                                       // 53\n  var storage = ref.collection.storesLookup[storeName];                                                              // 54\n                                                                                                                     // 55\n  if (!storage) {                                                                                                    // 56\n    throw new Meteor.Error(404, \"Not Found\", 'There is no store \"' + storeName + '\"');                               // 57\n  }                                                                                                                  // 58\n                                                                                                                     // 59\n  // Get the file                                                                                                    // 60\n  var copyInfo = ref.file.copies[storeName];                                                                         // 61\n                                                                                                                     // 62\n  if (!copyInfo) {                                                                                                   // 63\n    throw new Meteor.Error(404, \"Not Found\", 'This file was not stored in the ' + storeName + ' store');             // 64\n  }                                                                                                                  // 65\n                                                                                                                     // 66\n  if (typeof copyInfo.type === \"string\") {                                                                           // 67\n    self.setContentType(copyInfo.type);                                                                              // 68\n  } else {                                                                                                           // 69\n    self.setContentType('application/octet-stream');                                                                 // 70\n  }                                                                                                                  // 71\n                                                                                                                     // 72\n  // Content length, defaults to file size                                                                           // 73\n  var contentLength = copyInfo.size;                                                                                 // 74\n                                                                                                                     // 75\n  // Add 'Content-Disposition' header if requested a download/attachment URL                                         // 76\n  var start, end;                                                                                                    // 77\n  if (typeof ref.download !== \"undefined\") {                                                                         // 78\n    var filename = ref.filename || copyInfo.name;                                                                    // 79\n    self.addHeader('Content-Disposition', 'attachment; filename=\"' + filename + '\"');                                // 80\n                                                                                                                     // 81\n    // If a chunk/range was requested instead of the whole file, serve that                                          // 82\n    var unit, range = self.requestHeaders.range;                                                                     // 83\n    if (range) {                                                                                                     // 84\n      // Parse range header                                                                                          // 85\n      range = range.split('=');                                                                                      // 86\n                                                                                                                     // 87\n      unit = range[0];                                                                                               // 88\n      if (unit !== 'bytes')                                                                                          // 89\n        throw new Meteor.Error(416, \"Requested Range Not Satisfiable\");                                              // 90\n                                                                                                                     // 91\n      range = range[1];                                                                                              // 92\n      // Spec allows multiple ranges, but we will serve only the first                                               // 93\n      range = range.split(',')[0];                                                                                   // 94\n      // Get start and end byte positions                                                                            // 95\n      range = range.split('-');                                                                                      // 96\n      start = range[0];                                                                                              // 97\n      end = range[1] || '';                                                                                          // 98\n      // Convert to numbers and adjust invalid values when possible                                                  // 99\n      start = start.length ? Math.max(Number(start), 0) : 0;                                                         // 100\n      end = end.length ? Math.min(Number(end), copyInfo.size - 1) : copyInfo.size - 1;                               // 101\n      if (end < start)                                                                                               // 102\n        throw new Meteor.Error(416, \"Requested Range Not Satisfiable\");                                              // 103\n                                                                                                                     // 104\n      self.setStatusCode(206, 'Partial Content');                                                                    // 105\n      self.addHeader('Content-Range', 'bytes ' + start + '-' + end + '/' + copyInfo.size);                           // 106\n      end = end + 1; //HTTP end byte is inclusive and ours are not                                                   // 107\n                                                                                                                     // 108\n      // Sets properly content length for range                                                                      // 109\n      contentLength = end - start;                                                                                   // 110\n    } else {                                                                                                         // 111\n      self.setStatusCode(200);                                                                                       // 112\n    }                                                                                                                // 113\n  } else {                                                                                                           // 114\n    self.addHeader('Content-Disposition', 'inline');                                                                 // 115\n    self.setStatusCode(200);                                                                                         // 116\n  }                                                                                                                  // 117\n                                                                                                                     // 118\n  // Add any other global custom headers and collection-specific custom headers                                      // 119\n  FS.Utility.each(getHeaders.concat(getHeadersByCollection[ref.collection.name] || []), function(header) {           // 120\n    self.addHeader(header[0], header[1]);                                                                            // 121\n  });                                                                                                                // 122\n                                                                                                                     // 123\n  // Inform clients about length (or chunk length in case of ranges)                                                 // 124\n  self.addHeader('Content-Length', contentLength);                                                                   // 125\n                                                                                                                     // 126\n  // Last modified header (updatedAt from file info)                                                                 // 127\n  self.addHeader('Last-Modified', copyInfo.updatedAt.toUTCString());                                                 // 128\n                                                                                                                     // 129\n  // Inform clients that we accept ranges for resumable chunked downloads                                            // 130\n  self.addHeader('Accept-Ranges', 'bytes');                                                                          // 131\n                                                                                                                     // 132\n  //ref.file.createReadStream(storeName).pipe(self.createWriteStream());                                             // 133\n  var readStream = storage.adapter.createReadStream(ref.file);                                                       // 134\n                                                                                                                     // 135\n  readStream.on('error', function(err) {                                                                             // 136\n    // Send proper error message on get error                                                                        // 137\n    if (err.message && err.statusCode) {                                                                             // 138\n      self.Error(new Meteor.Error(err.statusCode, err.message));                                                     // 139\n    } else {                                                                                                         // 140\n      self.Error(new Meteor.Error(503, 'Service unavailable'));                                                      // 141\n    }                                                                                                                // 142\n  });                                                                                                                // 143\n  readStream.pipe(self.createWriteStream());                                                                         // 144\n                                                                                                                     // 145\n};                                                                                                                   // 146\n                                                                                                                     // 147\nhttpPutInsertHandler = function httpPutInsertHandler(ref) {                                                          // 148\n  var self = this;                                                                                                   // 149\n  var opts = FS.Utility.extend({}, self.query || {}, self.params || {});                                             // 150\n                                                                                                                     // 151\n  FS.debug && console.log(\"HTTP PUT (insert) handler\");                                                              // 152\n                                                                                                                     // 153\n  // Create the nice FS.File                                                                                         // 154\n  var fileObj = new FS.File();                                                                                       // 155\n                                                                                                                     // 156\n  // Set its name                                                                                                    // 157\n  fileObj.name(opts.filename || null);                                                                               // 158\n                                                                                                                     // 159\n  // Attach the readstream as the file's data                                                                        // 160\n  fileObj.attachData(self.createReadStream(), {type: self.requestHeaders['content-type'] || 'application/octet-stream'});\n                                                                                                                     // 162\n  // Validate with insert allow/deny                                                                                 // 163\n  FS.Utility.validateAction(ref.collection.files._validators['insert'], file, self.userId);                          // 164\n                                                                                                                     // 165\n  // Insert file into collection, triggering readStream storage                                                      // 166\n  ref.collection.insert(fileObj);                                                                                    // 167\n                                                                                                                     // 168\n  // Send response                                                                                                   // 169\n  self.setStatusCode(200);                                                                                           // 170\n                                                                                                                     // 171\n  // Return the new file id                                                                                          // 172\n  return {_id: fileObj._id};                                                                                         // 173\n};                                                                                                                   // 174\n                                                                                                                     // 175\nhttpPutUpdateHandler = function httpPutUpdateHandler(ref) {                                                          // 176\n  var self = this;                                                                                                   // 177\n  var opts = FS.Utility.extend({}, self.query || {}, self.params || {});                                             // 178\n                                                                                                                     // 179\n  var chunk = parseInt(opts.chunk, 10);                                                                              // 180\n  if (isNaN(chunk)) chunk = 0;                                                                                       // 181\n                                                                                                                     // 182\n  FS.debug && console.log(\"HTTP PUT (update) handler received chunk: \", chunk);                                      // 183\n                                                                                                                     // 184\n  // Validate with insert allow/deny; also mounts and retrieves the file                                             // 185\n  FS.Utility.validateAction(ref.collection.files._validators['insert'], ref.file, self.userId);                      // 186\n                                                                                                                     // 187\n  self.createReadStream().pipe( FS.TempStore.createWriteStream(ref.file, chunk) );                                   // 188\n                                                                                                                     // 189\n  // Send response                                                                                                   // 190\n  self.setStatusCode(200);                                                                                           // 191\n                                                                                                                     // 192\n  return { _id: ref.file._id, chunk: chunk };                                                                        // 193\n};                                                                                                                   // 194\n                                                                                                                     // 195\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/cfs:access-point/access-point-server.js                                                                  //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar path = Npm.require(\"path\");                                                                                      // 1\n                                                                                                                     // 2\nHTTP.publishFormats({                                                                                                // 3\n  fileRecordFormat: function (input) {                                                                               // 4\n    // Set the method scope content type to json                                                                     // 5\n    this.setContentType('application/json');                                                                         // 6\n    if (FS.Utility.isArray(input)) {                                                                                 // 7\n      return EJSON.stringify(FS.Utility.map(input, function (obj) {                                                  // 8\n        return FS.Utility.cloneFileRecord(obj);                                                                      // 9\n      }));                                                                                                           // 10\n    } else {                                                                                                         // 11\n      return EJSON.stringify(FS.Utility.cloneFileRecord(input));                                                     // 12\n    }                                                                                                                // 13\n  }                                                                                                                  // 14\n});                                                                                                                  // 15\n                                                                                                                     // 16\n/**                                                                                                                  // 17\n * @method FS.HTTP.setHeadersForGet                                                                                  // 18\n * @public                                                                                                           // 19\n * @param {Array} headers - List of headers, where each is a two-item array in which item 1 is the header name and item 2 is the header value.\n * @param {Array|String} [collections] - Which collections the headers should be added for. Omit this argument to add the header for all collections.\n * @returns {undefined}                                                                                              // 22\n */                                                                                                                  // 23\nFS.HTTP.setHeadersForGet = function setHeadersForGet(headers, collections) {                                         // 24\n  if (typeof collections === \"string\") {                                                                             // 25\n    collections = [collections];                                                                                     // 26\n  }                                                                                                                  // 27\n  if (collections) {                                                                                                 // 28\n    FS.Utility.each(collections, function(collectionName) {                                                          // 29\n      getHeadersByCollection[collectionName] = headers || [];                                                        // 30\n    });                                                                                                              // 31\n  } else {                                                                                                           // 32\n    getHeaders = headers || [];                                                                                      // 33\n  }                                                                                                                  // 34\n};                                                                                                                   // 35\n                                                                                                                     // 36\n/**                                                                                                                  // 37\n * @method FS.HTTP.publish                                                                                           // 38\n * @public                                                                                                           // 39\n * @param {FS.Collection} collection                                                                                 // 40\n * @param {Function} func - Publish function that returns a cursor.                                                  // 41\n * @returns {undefined}                                                                                              // 42\n *                                                                                                                   // 43\n * Publishes all documents returned by the cursor at a GET URL                                                       // 44\n * with the format baseUrl/record/collectionName. The publish                                                        // 45\n * function `this` is similar to normal `Meteor.publish`.                                                            // 46\n */                                                                                                                  // 47\nFS.HTTP.publish = function fsHttpPublish(collection, func) {                                                         // 48\n  var name = baseUrl + '/record/' + collection.name;                                                                 // 49\n  // Mount collection listing URL using http-publish package                                                         // 50\n  HTTP.publish({                                                                                                     // 51\n    name: name,                                                                                                      // 52\n    defaultFormat: 'fileRecordFormat',                                                                               // 53\n    collection: collection,                                                                                          // 54\n    collectionGet: true,                                                                                             // 55\n    collectionPost: false,                                                                                           // 56\n    documentGet: true,                                                                                               // 57\n    documentPut: false,                                                                                              // 58\n    documentDelete: false                                                                                            // 59\n  }, func);                                                                                                          // 60\n                                                                                                                     // 61\n  FS.debug && console.log(\"Registered HTTP method GET URLs:\\n\\n\" + name + '\\n' + name + '/:id\\n');                   // 62\n};                                                                                                                   // 63\n                                                                                                                     // 64\n/**                                                                                                                  // 65\n * @method FS.HTTP.unpublish                                                                                         // 66\n * @public                                                                                                           // 67\n * @param {FS.Collection} collection                                                                                 // 68\n * @returns {undefined}                                                                                              // 69\n *                                                                                                                   // 70\n * Unpublishes a restpoint created by a call to `FS.HTTP.publish`                                                    // 71\n */                                                                                                                  // 72\nFS.HTTP.unpublish = function fsHttpUnpublish(collection) {                                                           // 73\n  // Mount collection listing URL using http-publish package                                                         // 74\n  HTTP.unpublish(baseUrl + '/record/' + collection.name);                                                            // 75\n};                                                                                                                   // 76\n                                                                                                                     // 77\n_existingMountPoints = {};                                                                                           // 78\n                                                                                                                     // 79\n/**                                                                                                                  // 80\n * @method defaultSelectorFunction                                                                                   // 81\n * @private                                                                                                          // 82\n * @returns { collection, file }                                                                                     // 83\n *                                                                                                                   // 84\n * This is the default selector function                                                                             // 85\n */                                                                                                                  // 86\nvar defaultSelectorFunction = function() {                                                                           // 87\n  var self = this;                                                                                                   // 88\n  // Selector function                                                                                               // 89\n  //                                                                                                                 // 90\n  // This function will have to return the collection and the                                                        // 91\n  // file. If file not found undefined is returned - if null is returned the                                         // 92\n  // search was not possible                                                                                         // 93\n  var opts = FS.Utility.extend({}, self.query || {}, self.params || {});                                             // 94\n                                                                                                                     // 95\n  // Get the collection name from the url                                                                            // 96\n  var collectionName = opts.collectionName;                                                                          // 97\n                                                                                                                     // 98\n  // Get the id from the url                                                                                         // 99\n  var id = opts.id;                                                                                                  // 100\n                                                                                                                     // 101\n  // Get the collection                                                                                              // 102\n  var collection = FS._collections[collectionName];                                                                  // 103\n                                                                                                                     // 104\n  // Get the file if possible else return null                                                                       // 105\n  var file = (id && collection)? collection.findOne({ _id: id }): null;                                              // 106\n                                                                                                                     // 107\n  // Return the collection and the file                                                                              // 108\n  return {                                                                                                           // 109\n    collection: collection,                                                                                          // 110\n    file: file,                                                                                                      // 111\n    storeName: opts.store,                                                                                           // 112\n    download: opts.download,                                                                                         // 113\n    filename: opts.filename                                                                                          // 114\n  };                                                                                                                 // 115\n};                                                                                                                   // 116\n                                                                                                                     // 117\n/*                                                                                                                   // 118\n * @method FS.HTTP.mount                                                                                             // 119\n * @public                                                                                                           // 120\n * @param {array of string} mountPoints mount points to map rest functinality on                                     // 121\n * @param {function} selector_f [selector] function returns `{ collection, file }` for mount points to work with     // 122\n *                                                                                                                   // 123\n*/                                                                                                                   // 124\nFS.HTTP.mount = function(mountPoints, selector_f) {                                                                  // 125\n  // We take mount points as an array and we get a selector function                                                 // 126\n  var selectorFunction = selector_f || defaultSelectorFunction;                                                      // 127\n                                                                                                                     // 128\n  var accessPoint = {                                                                                                // 129\n    'stream': true,                                                                                                  // 130\n    'auth': expirationAuth,                                                                                          // 131\n    'post': function(data) {                                                                                         // 132\n      // Use the selector for finding the collection and file reference                                              // 133\n      var ref = selectorFunction.call(this);                                                                         // 134\n                                                                                                                     // 135\n      // We dont support post - this would be normal insert eg. of filerecord?                                       // 136\n      throw new Meteor.Error(501, \"Not implemented\", \"Post is not supported\");                                       // 137\n    },                                                                                                               // 138\n    'put': function(data) {                                                                                          // 139\n      // Use the selector for finding the collection and file reference                                              // 140\n      var ref = selectorFunction.call(this);                                                                         // 141\n                                                                                                                     // 142\n      // Make sure we have a collection reference                                                                    // 143\n      if (!ref.collection)                                                                                           // 144\n        throw new Meteor.Error(404, \"Not Found\", \"No collection found\");                                             // 145\n                                                                                                                     // 146\n      // Make sure we have a file reference                                                                          // 147\n      if (ref.file === null) {                                                                                       // 148\n        // No id supplied so we will create a new FS.File instance and                                               // 149\n        // insert the supplied data.                                                                                 // 150\n        return httpPutInsertHandler.apply(this, [ref]);                                                              // 151\n      } else {                                                                                                       // 152\n        if (ref.file) {                                                                                              // 153\n          return httpPutUpdateHandler.apply(this, [ref]);                                                            // 154\n        } else {                                                                                                     // 155\n          throw new Meteor.Error(404, \"Not Found\", 'No file found');                                                 // 156\n        }                                                                                                            // 157\n      }                                                                                                              // 158\n    },                                                                                                               // 159\n    'get': function(data) {                                                                                          // 160\n      // Use the selector for finding the collection and file reference                                              // 161\n      var ref = selectorFunction.call(this);                                                                         // 162\n                                                                                                                     // 163\n      // Make sure we have a collection reference                                                                    // 164\n      if (!ref.collection)                                                                                           // 165\n        throw new Meteor.Error(404, \"Not Found\", \"No collection found\");                                             // 166\n                                                                                                                     // 167\n      // Make sure we have a file reference                                                                          // 168\n      if (ref.file === null) {                                                                                       // 169\n        // No id supplied so we will return the published list of files ala                                          // 170\n        // http.publish in json format                                                                               // 171\n        return httpGetListHandler.apply(this, [ref]);                                                                // 172\n      } else {                                                                                                       // 173\n        if (ref.file) {                                                                                              // 174\n          return httpGetHandler.apply(this, [ref]);                                                                  // 175\n        } else {                                                                                                     // 176\n          throw new Meteor.Error(404, \"Not Found\", 'No file found');                                                 // 177\n        }                                                                                                            // 178\n      }                                                                                                              // 179\n    },                                                                                                               // 180\n    'delete': function(data) {                                                                                       // 181\n      // Use the selector for finding the collection and file reference                                              // 182\n      var ref = selectorFunction.call(this);                                                                         // 183\n                                                                                                                     // 184\n      // Make sure we have a collection reference                                                                    // 185\n      if (!ref.collection)                                                                                           // 186\n        throw new Meteor.Error(404, \"Not Found\", \"No collection found\");                                             // 187\n                                                                                                                     // 188\n      // Make sure we have a file reference                                                                          // 189\n      if (ref.file) {                                                                                                // 190\n        return httpDelHandler.apply(this, [ref]);                                                                    // 191\n      } else {                                                                                                       // 192\n        throw new Meteor.Error(404, \"Not Found\", 'No file found');                                                   // 193\n      }                                                                                                              // 194\n    }                                                                                                                // 195\n  };                                                                                                                 // 196\n                                                                                                                     // 197\n  var accessPoints = {};                                                                                             // 198\n                                                                                                                     // 199\n  // Add debug message                                                                                               // 200\n  FS.debug && console.log('Registered HTTP method URLs:');                                                           // 201\n                                                                                                                     // 202\n  FS.Utility.each(mountPoints, function(mountPoint) {                                                                // 203\n    // Couple mountpoint and accesspoint                                                                             // 204\n    accessPoints[mountPoint] = accessPoint;                                                                          // 205\n    // Remember our mountpoints                                                                                      // 206\n    _existingMountPoints[mountPoint] = mountPoint;                                                                   // 207\n    // Add debug message                                                                                             // 208\n    FS.debug && console.log(mountPoint);                                                                             // 209\n  });                                                                                                                // 210\n                                                                                                                     // 211\n  // XXX: HTTP:methods should unmount existing mounts in case of overwriting?                                        // 212\n  HTTP.methods(accessPoints);                                                                                        // 213\n                                                                                                                     // 214\n};                                                                                                                   // 215\n                                                                                                                     // 216\n/**                                                                                                                  // 217\n * @method FS.HTTP.unmount                                                                                           // 218\n * @public                                                                                                           // 219\n * @param {string | array of string} [mountPoints] Optional, if not specified all mountpoints are unmounted          // 220\n *                                                                                                                   // 221\n */                                                                                                                  // 222\nFS.HTTP.unmount = function(mountPoints) {                                                                            // 223\n  // The mountPoints is optional, can be string or array if undefined then                                           // 224\n  // _existingMountPoints will be used                                                                               // 225\n  var unmountList;                                                                                                   // 226\n  // Container for the mount points to unmount                                                                       // 227\n  var unmountPoints = {};                                                                                            // 228\n                                                                                                                     // 229\n  if (typeof mountPoints === 'undefined') {                                                                          // 230\n    // Use existing mount points - unmount all                                                                       // 231\n    unmountList = _existingMountPoints;                                                                              // 232\n  } else if (mountPoints === ''+mountPoints) {                                                                       // 233\n    // Got a string                                                                                                  // 234\n    unmountList = [mountPoints];                                                                                     // 235\n  } else if (mountPoints.length) {                                                                                   // 236\n    // Got an array                                                                                                  // 237\n    unmountList = mountPoints;                                                                                       // 238\n  }                                                                                                                  // 239\n                                                                                                                     // 240\n  // If we have a list to unmount                                                                                    // 241\n  if (unmountList) {                                                                                                 // 242\n    // Iterate over each item                                                                                        // 243\n    FS.Utility.each(unmountList, function(mountPoint) {                                                              // 244\n      // Check _existingMountPoints to make sure the mount point exists in our                                       // 245\n      // context / was created by the FS.HTTP.mount                                                                  // 246\n      if (_existingMountPoints[mountPoint]) {                                                                        // 247\n        // Mark as unmount                                                                                           // 248\n        unmountPoints[mountPoint] = false;                                                                           // 249\n        // Release                                                                                                   // 250\n        delete _existingMountPoints[mountPoint];                                                                     // 251\n      }                                                                                                              // 252\n    });                                                                                                              // 253\n    FS.debug && console.log('FS.HTTP.unmount:');                                                                     // 254\n    FS.debug && console.log(unmountPoints);                                                                          // 255\n    // Complete unmount                                                                                              // 256\n    HTTP.methods(unmountPoints);                                                                                     // 257\n  }                                                                                                                  // 258\n};                                                                                                                   // 259\n                                                                                                                     // 260\n// ### FS.Collection maps on HTTP pr. default on the following restpoints:                                           // 261\n// *                                                                                                                 // 262\n//    baseUrl + '/files/:collectionName/:id/:filename',                                                              // 263\n//    baseUrl + '/files/:collectionName/:id',                                                                        // 264\n//    baseUrl + '/files/:collectionName'                                                                             // 265\n//                                                                                                                   // 266\n// Change/ replace the existing mount point by:                                                                      // 267\n// ```js                                                                                                             // 268\n//   // unmount all existing                                                                                         // 269\n//   FS.HTTP.unmount();                                                                                              // 270\n//   // Create new mount point                                                                                       // 271\n//   FS.HTTP.mount([                                                                                                 // 272\n//    '/cfs/files/:collectionName/:id/:filename',                                                                    // 273\n//    '/cfs/files/:collectionName/:id',                                                                              // 274\n//    '/cfs/files/:collectionName'                                                                                   // 275\n//  ]);                                                                                                              // 276\n//  ```                                                                                                              // 277\n//                                                                                                                   // 278\nmountUrls = function mountUrls() {                                                                                   // 279\n  // We unmount first in case we are calling this a second time                                                      // 280\n  FS.HTTP.unmount();                                                                                                 // 281\n                                                                                                                     // 282\n  FS.HTTP.mount([                                                                                                    // 283\n    baseUrl + '/files/:collectionName/:id/:filename',                                                                // 284\n    baseUrl + '/files/:collectionName/:id',                                                                          // 285\n    baseUrl + '/files/:collectionName'                                                                               // 286\n  ]);                                                                                                                // 287\n};                                                                                                                   // 288\n                                                                                                                     // 289\n// Returns the userId from URL token                                                                                 // 290\nvar expirationAuth = function expirationAuth() {                                                                     // 291\n  var self = this;                                                                                                   // 292\n                                                                                                                     // 293\n  // Read the token from '/hello?token=base64'                                                                       // 294\n  var encodedToken = self.query.token;                                                                               // 295\n                                                                                                                     // 296\n  FS.debug && console.log(\"token: \"+encodedToken);                                                                   // 297\n                                                                                                                     // 298\n  if (!encodedToken || !Meteor.users) return false;                                                                  // 299\n                                                                                                                     // 300\n  // Check the userToken before adding it to the db query                                                            // 301\n  // Set the this.userId                                                                                             // 302\n  var tokenString = FS.Utility.atob(encodedToken);                                                                   // 303\n                                                                                                                     // 304\n  var tokenObject;                                                                                                   // 305\n  try {                                                                                                              // 306\n    tokenObject = JSON.parse(tokenString);                                                                           // 307\n  } catch(err) {                                                                                                     // 308\n    throw new Meteor.Error(400, 'Bad Request');                                                                      // 309\n  }                                                                                                                  // 310\n                                                                                                                     // 311\n  // XXX: Do some check here of the object                                                                           // 312\n  var userToken = tokenObject.authToken;                                                                             // 313\n  if (userToken !== ''+userToken) {                                                                                  // 314\n    throw new Meteor.Error(400, 'Bad Request');                                                                      // 315\n  }                                                                                                                  // 316\n                                                                                                                     // 317\n  // If we have an expiration token we should check that it's still valid                                            // 318\n  if (tokenObject.expiration != null) {                                                                              // 319\n    // check if its too old                                                                                          // 320\n    var now = Date.now();                                                                                            // 321\n    if (tokenObject.expiration < now) {                                                                              // 322\n      FS.debug && console.log('Expired token: ' + tokenObject.expiration + ' is less than ' + now);                  // 323\n      throw new Meteor.Error(500, 'Expired token');                                                                  // 324\n    }                                                                                                                // 325\n  }                                                                                                                  // 326\n                                                                                                                     // 327\n  // We are not on a secure line - so we have to look up the user...                                                 // 328\n  var user = Meteor.users.findOne({                                                                                  // 329\n    $or: [                                                                                                           // 330\n      {'services.resume.loginTokens.hashedToken': Accounts._hashLoginToken(userToken)},                              // 331\n      {'services.resume.loginTokens.token': userToken}                                                               // 332\n    ]                                                                                                                // 333\n  });                                                                                                                // 334\n                                                                                                                     // 335\n  // Set the userId in the scope                                                                                     // 336\n  return user && user._id;                                                                                           // 337\n};                                                                                                                   // 338\n                                                                                                                     // 339\nHTTP.methods(                                                                                                        // 340\n  {'/cfs/servertime': {                                                                                              // 341\n    get: function(data) {                                                                                            // 342\n      return Date.now().toString();                                                                                  // 343\n    }                                                                                                                // 344\n  }                                                                                                                  // 345\n});                                                                                                                  // 346\n                                                                                                                     // 347\n// Unify client / server api                                                                                         // 348\nFS.HTTP.now = function() {                                                                                           // 349\n  return Date.now();                                                                                                 // 350\n};                                                                                                                   // 351\n                                                                                                                     // 352\n// Start up the basic mount points                                                                                   // 353\nMeteor.startup(function () {                                                                                         // 354\n  mountUrls();                                                                                                       // 355\n});                                                                                                                  // 356\n                                                                                                                     // 357\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}