{"version":3,"sources":["meteor://ðŸ’»app/packages/cfs_storage-adapter/packages/cfs_storage-adapter.js"],"names":[],"mappingsfile":"/packages/cfs_storage-adapter.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/cfs:storage-adapter/storageAdapter.server.js                                                         //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\n/* global FS, _storageAdapters:true, EventEmitter */                                                             // 1\n                                                                                                                 // 2\n// #############################################################################                                 // 3\n//                                                                                                               // 4\n// STORAGE ADAPTER                                                                                               // 5\n//                                                                                                               // 6\n// #############################################################################                                 // 7\n_storageAdapters = {};                                                                                           // 8\n                                                                                                                 // 9\nFS.StorageAdapter = function(storeName, options, api) {                                                          // 10\n  var self = this, fileKeyMaker;                                                                                 // 11\n  options = options || {};                                                                                       // 12\n                                                                                                                 // 13\n  // If storeName is the only argument, a string and the SA already found                                        // 14\n  // we will just return that SA                                                                                 // 15\n  if (arguments.length === 1 && storeName === '' + storeName &&                                                  // 16\n          typeof _storageAdapters[storeName] !== 'undefined')                                                    // 17\n    return _storageAdapters[storeName];                                                                          // 18\n                                                                                                                 // 19\n  // Verify that the storage adapter defines all the necessary API methods                                       // 20\n  if (typeof api === 'undefined') {                                                                              // 21\n    throw new Error('FS.StorageAdapter please define an api');                                                   // 22\n  }                                                                                                              // 23\n                                                                                                                 // 24\n  FS.Utility.each('fileKey,remove,typeName,createReadStream,createWriteStream'.split(','), function(name) {      // 25\n    if (typeof api[name] === 'undefined') {                                                                      // 26\n      throw new Error('FS.StorageAdapter please define an api. \"' + name + '\" ' + (api.typeName || ''));         // 27\n    }                                                                                                            // 28\n  });                                                                                                            // 29\n                                                                                                                 // 30\n  // Create an internal namespace, starting a name with underscore is only                                       // 31\n  // allowed for stores marked with options.internal === true                                                    // 32\n  if (options.internal !== true && storeName[0] === '_') {                                                       // 33\n    throw new Error('A storage adapter name may not begin with \"_\"');                                            // 34\n  }                                                                                                              // 35\n                                                                                                                 // 36\n  // store reference for easy lookup by storeName                                                                // 37\n  if (typeof _storageAdapters[storeName] !== 'undefined') {                                                      // 38\n    throw new Error('Storage name already exists: \"' + storeName + '\"');                                         // 39\n  } else {                                                                                                       // 40\n    _storageAdapters[storeName] = self;                                                                          // 41\n  }                                                                                                              // 42\n                                                                                                                 // 43\n  // User can customize the file key generation function                                                         // 44\n  if (typeof options.fileKeyMaker === \"function\") {                                                              // 45\n    fileKeyMaker = options.fileKeyMaker;                                                                         // 46\n  } else {                                                                                                       // 47\n    fileKeyMaker = api.fileKey;                                                                                  // 48\n  }                                                                                                              // 49\n                                                                                                                 // 50\n  // User can provide a function to adjust the fileObj                                                           // 51\n  // before it is written to the store.                                                                          // 52\n  var beforeWrite = options.beforeWrite;                                                                         // 53\n                                                                                                                 // 54\n  // extend self with options and other info                                                                     // 55\n  FS.Utility.extend(this, options, {                                                                             // 56\n    name: storeName,                                                                                             // 57\n    typeName: api.typeName                                                                                       // 58\n  });                                                                                                            // 59\n                                                                                                                 // 60\n  // Create a nicer abstracted adapter interface                                                                 // 61\n  self.adapter = {};                                                                                             // 62\n                                                                                                                 // 63\n  self.adapter.fileKey = function(fileObj) {                                                                     // 64\n    return fileKeyMaker(fileObj);                                                                                // 65\n  };                                                                                                             // 66\n                                                                                                                 // 67\n  // Return readable stream for fileKey                                                                          // 68\n  self.adapter.createReadStreamForFileKey = function(fileKey, options) {                                         // 69\n    if (FS.debug) console.log('createReadStreamForFileKey ' + storeName);                                        // 70\n    return FS.Utility.safeStream( api.createReadStream(fileKey, options) );                                      // 71\n  };                                                                                                             // 72\n                                                                                                                 // 73\n  // Return readable stream for fileObj                                                                          // 74\n  self.adapter.createReadStream = function(fileObj, options) {                                                   // 75\n    if (FS.debug) console.log('createReadStream ' + storeName);                                                  // 76\n    if (self.internal) {                                                                                         // 77\n      // Internal stores take a fileKey                                                                          // 78\n      return self.adapter.createReadStreamForFileKey(fileObj, options);                                          // 79\n    }                                                                                                            // 80\n    return FS.Utility.safeStream( self._transform.createReadStream(fileObj, options) );                          // 81\n  };                                                                                                             // 82\n                                                                                                                 // 83\n  function logEventsForStream(stream) {                                                                          // 84\n    if (FS.debug) {                                                                                              // 85\n      stream.on('stored', function() {                                                                           // 86\n        console.log('-----------STORED STREAM', storeName);                                                      // 87\n      });                                                                                                        // 88\n                                                                                                                 // 89\n      stream.on('close', function() {                                                                            // 90\n        console.log('-----------CLOSE STREAM', storeName);                                                       // 91\n      });                                                                                                        // 92\n                                                                                                                 // 93\n      stream.on('end', function() {                                                                              // 94\n        console.log('-----------END STREAM', storeName);                                                         // 95\n      });                                                                                                        // 96\n                                                                                                                 // 97\n      stream.on('finish', function() {                                                                           // 98\n        console.log('-----------FINISH STREAM', storeName);                                                      // 99\n      });                                                                                                        // 100\n                                                                                                                 // 101\n      stream.on('error', function(error) {                                                                       // 102\n        console.log('-----------ERROR STREAM', storeName, error && (error.message || error.code));               // 103\n      });                                                                                                        // 104\n    }                                                                                                            // 105\n  }                                                                                                              // 106\n                                                                                                                 // 107\n  // Return writeable stream for fileKey                                                                         // 108\n  self.adapter.createWriteStreamForFileKey = function(fileKey, options) {                                        // 109\n    if (FS.debug) console.log('createWriteStreamForFileKey ' + storeName);                                       // 110\n    var writeStream = FS.Utility.safeStream( api.createWriteStream(fileKey, options) );                          // 111\n                                                                                                                 // 112\n    logEventsForStream(writeStream);                                                                             // 113\n                                                                                                                 // 114\n    return writeStream;                                                                                          // 115\n  };                                                                                                             // 116\n                                                                                                                 // 117\n  // Return writeable stream for fileObj                                                                         // 118\n  self.adapter.createWriteStream = function(fileObj, options) {                                                  // 119\n    if (FS.debug) console.log('createWriteStream ' + storeName + ', internal: ' + !!self.internal);              // 120\n                                                                                                                 // 121\n    if (self.internal) {                                                                                         // 122\n      // Internal stores take a fileKey                                                                          // 123\n      return self.adapter.createWriteStreamForFileKey(fileObj, options);                                         // 124\n    }                                                                                                            // 125\n                                                                                                                 // 126\n    // If we haven't set name, type, or size for this version yet,                                               // 127\n    // set it to same values as original version. We don't save                                                  // 128\n    // these to the DB right away because they might be changed                                                  // 129\n    // in a transformWrite function.                                                                             // 130\n    if (!fileObj.name({store: storeName})) {                                                                     // 131\n      fileObj.name(fileObj.name(), {store: storeName, save: false});                                             // 132\n    }                                                                                                            // 133\n    if (!fileObj.type({store: storeName})) {                                                                     // 134\n      fileObj.type(fileObj.type(), {store: storeName, save: false});                                             // 135\n    }                                                                                                            // 136\n    if (!fileObj.size({store: storeName})) {                                                                     // 137\n      fileObj.size(fileObj.size(), {store: storeName, save: false});                                             // 138\n    }                                                                                                            // 139\n                                                                                                                 // 140\n    // Call user function to adjust file metadata for this store.                                                // 141\n    // We support updating name, extension, and/or type based on                                                 // 142\n    // info returned in an object. Or `fileObj` could be                                                         // 143\n    // altered directly within the beforeWrite function.                                                         // 144\n    if (beforeWrite) {                                                                                           // 145\n      var fileChanges = beforeWrite(fileObj);                                                                    // 146\n      if (typeof fileChanges === \"object\") {                                                                     // 147\n        if (fileChanges.extension) {                                                                             // 148\n          fileObj.extension(fileChanges.extension, {store: storeName, save: false});                             // 149\n        } else if (fileChanges.name) {                                                                           // 150\n          fileObj.name(fileChanges.name, {store: storeName, save: false});                                       // 151\n        }                                                                                                        // 152\n        if (fileChanges.type) {                                                                                  // 153\n          fileObj.type(fileChanges.type, {store: storeName, save: false});                                       // 154\n        }                                                                                                        // 155\n      }                                                                                                          // 156\n    }                                                                                                            // 157\n                                                                                                                 // 158\n    var writeStream = FS.Utility.safeStream( self._transform.createWriteStream(fileObj, options) );              // 159\n                                                                                                                 // 160\n    logEventsForStream(writeStream);                                                                             // 161\n                                                                                                                 // 162\n    // Its really only the storage adapter who knows if the file is uploaded                                     // 163\n    //                                                                                                           // 164\n    // We have to use our own event making sure the storage process is completed                                 // 165\n    // this is mainly                                                                                            // 166\n    writeStream.safeOn('stored', function(result) {                                                              // 167\n      if (typeof result.fileKey === 'undefined') {                                                               // 168\n        throw new Error('SA ' + storeName + ' type ' + api.typeName + ' did not return a fileKey');              // 169\n      }                                                                                                          // 170\n      if (FS.debug) console.log('SA', storeName, 'stored', result.fileKey);                                      // 171\n      // Set the fileKey                                                                                         // 172\n      fileObj.copies[storeName].key = result.fileKey;                                                            // 173\n                                                                                                                 // 174\n      // Update the size, as provided by the SA, in case it was changed by stream transformation                 // 175\n      if (typeof result.size === \"number\") {                                                                     // 176\n        fileObj.copies[storeName].size = result.size;                                                            // 177\n      }                                                                                                          // 178\n                                                                                                                 // 179\n      // Set last updated time, either provided by SA or now                                                     // 180\n      fileObj.copies[storeName].updatedAt = result.storedAt || new Date();                                       // 181\n                                                                                                                 // 182\n      // If the file object copy havent got a createdAt then set this                                            // 183\n      if (typeof fileObj.copies[storeName].createdAt === 'undefined') {                                          // 184\n        fileObj.copies[storeName].createdAt = fileObj.copies[storeName].updatedAt;                               // 185\n      }                                                                                                          // 186\n                                                                                                                 // 187\n      fileObj._saveChanges(storeName);                                                                           // 188\n                                                                                                                 // 189\n      // There is code in transform that may have set the original file size, too.                               // 190\n      fileObj._saveChanges('_original');                                                                         // 191\n    });                                                                                                          // 192\n                                                                                                                 // 193\n    // Emit events from SA                                                                                       // 194\n    writeStream.once('stored', function(/*result*/) {                                                            // 195\n      // XXX Because of the way stores inherit from SA, this will emit on every store.                           // 196\n      // Maybe need to rewrite the way we inherit from SA?                                                       // 197\n      var emitted = self.emit('stored', storeName, fileObj);                                                     // 198\n      if (FS.debug && !emitted) {                                                                                // 199\n        console.log(fileObj.name() + ' was successfully stored in the ' + storeName + ' store. You are seeing this informational message because you enabled debugging and you have not defined any listeners for the \"stored\" event on this store.');\n      }                                                                                                          // 201\n    });                                                                                                          // 202\n                                                                                                                 // 203\n    writeStream.on('error', function(error) {                                                                    // 204\n      // XXX We could wrap and clarify error                                                                     // 205\n      // XXX Because of the way stores inherit from SA, this will emit on every store.                           // 206\n      // Maybe need to rewrite the way we inherit from SA?                                                       // 207\n      var emitted = self.emit('error', storeName, error, fileObj);                                               // 208\n      if (FS.debug && !emitted) {                                                                                // 209\n        console.log(error);                                                                                      // 210\n      }                                                                                                          // 211\n    });                                                                                                          // 212\n                                                                                                                 // 213\n    return writeStream;                                                                                          // 214\n  };                                                                                                             // 215\n                                                                                                                 // 216\n  //internal                                                                                                     // 217\n  self._removeAsync = function(fileKey, callback) {                                                              // 218\n    // Remove the file from the store                                                                            // 219\n    api.remove.call(self, fileKey, callback);                                                                    // 220\n  };                                                                                                             // 221\n                                                                                                                 // 222\n  /**                                                                                                            // 223\n   * @method FS.StorageAdapter.prototype.remove                                                                  // 224\n   * @public                                                                                                     // 225\n   * @param {FS.File} fsFile The FS.File instance to be stored.                                                  // 226\n   * @param {Function} [callback] If not provided, will block and return true or false                           // 227\n   *                                                                                                             // 228\n   * Attempts to remove a file from the store. Returns true if removed or not                                    // 229\n   * found, or false if the file couldn't be removed.                                                            // 230\n   */                                                                                                            // 231\n  self.adapter.remove = function(fileObj, callback) {                                                            // 232\n    if (FS.debug) console.log(\"---SA REMOVE\");                                                                   // 233\n                                                                                                                 // 234\n    // Get the fileKey                                                                                           // 235\n    var fileKey = (fileObj instanceof FS.File) ? self.adapter.fileKey(fileObj) : fileObj;                        // 236\n                                                                                                                 // 237\n    if (callback) {                                                                                              // 238\n      return self._removeAsync(fileKey, FS.Utility.safeCallback(callback));                                      // 239\n    } else {                                                                                                     // 240\n      return Meteor._wrapAsync(self._removeAsync)(fileKey);                                                      // 241\n    }                                                                                                            // 242\n  };                                                                                                             // 243\n                                                                                                                 // 244\n  self.remove = function(fileObj, callback) {                                                                    // 245\n    // Add deprecation note                                                                                      // 246\n    console.warn('Storage.remove is deprecating, use \"Storage.adapter.remove\"');                                 // 247\n    return self.adapter.remove(fileObj, callback);                                                               // 248\n  };                                                                                                             // 249\n                                                                                                                 // 250\n  if (typeof api.init === 'function') {                                                                          // 251\n    Meteor._wrapAsync(api.init.bind(self))();                                                                    // 252\n  }                                                                                                              // 253\n                                                                                                                 // 254\n  // This supports optional transformWrite and transformRead                                                     // 255\n  self._transform = new FS.Transform({                                                                           // 256\n    adapter: self.adapter,                                                                                       // 257\n    // Optional transformation functions:                                                                        // 258\n    transformWrite: options.transformWrite,                                                                      // 259\n    transformRead: options.transformRead                                                                         // 260\n  });                                                                                                            // 261\n                                                                                                                 // 262\n};                                                                                                               // 263\n                                                                                                                 // 264\nNpm.require('util').inherits(FS.StorageAdapter, EventEmitter);                                                   // 265\n                                                                                                                 // 266\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/cfs:storage-adapter/transform.server.js                                                              //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\n/* global FS, gm */                                                                                              // 1\n                                                                                                                 // 2\nvar PassThrough = Npm.require('stream').PassThrough;                                                             // 3\nvar lengthStream = Npm.require('length-stream');                                                                 // 4\n                                                                                                                 // 5\nFS.Transform = function(options) {                                                                               // 6\n  var self = this;                                                                                               // 7\n                                                                                                                 // 8\n  options = options || {};                                                                                       // 9\n                                                                                                                 // 10\n  if (!(self instanceof FS.Transform))                                                                           // 11\n    throw new Error('FS.Transform must be called with the \"new\" keyword');                                       // 12\n                                                                                                                 // 13\n  if (!options.adapter)                                                                                          // 14\n    throw new Error('Transform expects option.adapter to be a storage adapter');                                 // 15\n                                                                                                                 // 16\n  self.storage = options.adapter;                                                                                // 17\n                                                                                                                 // 18\n  // Fetch the transformation functions if any                                                                   // 19\n  self.transformWrite = options.transformWrite;                                                                  // 20\n  self.transformRead = options.transformRead;                                                                    // 21\n};                                                                                                               // 22\n                                                                                                                 // 23\n// Allow packages to add scope                                                                                   // 24\nFS.Transform.scope = {                                                                                           // 25\n// Deprecate gm scope:                                                                                           // 26\n  gm: function(source, height, color) {                                                                          // 27\n    console.warn('Deprecation notice: `this.gm` is deprecating in favour of the general global `gm` scope');     // 28\n    if (typeof gm !== 'function')                                                                                // 29\n      throw new Error('No graphicsmagick package installed, `gm` not found in scope, eg. `cfs-graphicsmagick`'); // 30\n    return gm(source, height, color);                                                                            // 31\n  }                                                                                                              // 32\n// EO Deprecate gm scope                                                                                         // 33\n};                                                                                                               // 34\n                                                                                                                 // 35\n// The transformation stream triggers an \"stored\" event when data is stored into                                 // 36\n// the storage adapter                                                                                           // 37\nFS.Transform.prototype.createWriteStream = function(fileObj) {                                                   // 38\n  var self = this;                                                                                               // 39\n                                                                                                                 // 40\n  // Get the file key                                                                                            // 41\n  var fileKey = self.storage.fileKey(fileObj);                                                                   // 42\n                                                                                                                 // 43\n  // Rig write stream                                                                                            // 44\n  var destinationStream = self.storage.createWriteStreamForFileKey(fileKey, {                                    // 45\n    // Not all SA's can set these options and cfs dont depend on setting these                                   // 46\n    // but its nice if other systems are accessing the SA that some of the data                                  // 47\n    // is also available to those                                                                                // 48\n    aliases: [fileObj.name()],                                                                                   // 49\n    contentType: fileObj.type(),                                                                                 // 50\n    metadata: fileObj.metadata                                                                                   // 51\n  });                                                                                                            // 52\n                                                                                                                 // 53\n  // Pass through transformWrite function if provided                                                            // 54\n  if (typeof self.transformWrite === 'function') {                                                               // 55\n                                                                                                                 // 56\n    destinationStream = addPassThrough(destinationStream, function (ptStream, originalStream) {                  // 57\n      // Rig transform                                                                                           // 58\n      try {                                                                                                      // 59\n        self.transformWrite.call(FS.Transform.scope, fileObj, ptStream, originalStream);                         // 60\n        // XXX: If the transform function returns a buffer should we stream that?                                // 61\n      } catch(err) {                                                                                             // 62\n        // We emit an error - should we throw an error?                                                          // 63\n        console.warn('FS.Transform.createWriteStream transform function failed, Error: ');                       // 64\n        throw err;                                                                                               // 65\n      }                                                                                                          // 66\n    });                                                                                                          // 67\n                                                                                                                 // 68\n  }                                                                                                              // 69\n                                                                                                                 // 70\n  // If original doesn't have size, add another PassThrough to get and set the size.                             // 71\n  // This will run on size=0, too, which is OK.                                                                  // 72\n  // NOTE: This must come AFTER the transformWrite code block above. This might seem                             // 73\n  // confusing, but by coming after it, this will actually be executed BEFORE the user's                         // 74\n  // transform, which is what we need in order to be sure we get the original file                               // 75\n  // size and not the transformed file size.                                                                     // 76\n  if (!fileObj.size()) {                                                                                         // 77\n    destinationStream = addPassThrough(destinationStream, function (ptStream, originalStream) {                  // 78\n      var lstream = lengthStream(function (fileSize) {                                                           // 79\n        fileObj.size(fileSize, {save: false});                                                                   // 80\n      });                                                                                                        // 81\n                                                                                                                 // 82\n      ptStream.pipe(lstream).pipe(originalStream);                                                               // 83\n    });                                                                                                          // 84\n  }                                                                                                              // 85\n                                                                                                                 // 86\n  return destinationStream;                                                                                      // 87\n};                                                                                                               // 88\n                                                                                                                 // 89\nFS.Transform.prototype.createReadStream = function(fileObj, options) {                                           // 90\n  var self = this;                                                                                               // 91\n                                                                                                                 // 92\n  // Get the file key                                                                                            // 93\n  var fileKey = self.storage.fileKey(fileObj);                                                                   // 94\n                                                                                                                 // 95\n  // Rig read stream                                                                                             // 96\n  var sourceStream = self.storage.createReadStreamForFileKey(fileKey, options);                                  // 97\n                                                                                                                 // 98\n  // Pass through transformRead function if provided                                                             // 99\n  if (typeof self.transformRead === 'function') {                                                                // 100\n                                                                                                                 // 101\n    sourceStream = addPassThrough(sourceStream, function (ptStream, originalStream) {                            // 102\n      // Rig transform                                                                                           // 103\n      try {                                                                                                      // 104\n        self.transformRead.call(FS.Transform.scope, fileObj, originalStream, ptStream);                          // 105\n      } catch(err) {                                                                                             // 106\n        //throw new Error(err);                                                                                  // 107\n        // We emit an error - should we throw an error?                                                          // 108\n        sourceStream.emit('error', 'FS.Transform.createReadStream transform function failed');                   // 109\n      }                                                                                                          // 110\n    });                                                                                                          // 111\n                                                                                                                 // 112\n  }                                                                                                              // 113\n                                                                                                                 // 114\n  // We dont transform just normal SA interface                                                                  // 115\n  return sourceStream;                                                                                           // 116\n};                                                                                                               // 117\n                                                                                                                 // 118\n// Utility function to simplify adding layers of passthrough                                                     // 119\nfunction addPassThrough(stream, func) {                                                                          // 120\n  var pts = new PassThrough();                                                                                   // 121\n  // We pass on the special \"stored\" event for those listening                                                   // 122\n  stream.on('stored', function(result) {                                                                         // 123\n    pts.emit('stored', result);                                                                                  // 124\n  });                                                                                                            // 125\n  func(pts, stream);                                                                                             // 126\n  return pts;                                                                                                    // 127\n}                                                                                                                // 128\n                                                                                                                 // 129\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}